# Bazel build
# C/C++ documentation : https://docs.bazel.build/versions/master/be/c-cpp.html

load("//bazel:strai.bzl", "COPTS")

cc_binary(
    name = "libstrai_api.so",
    copts = COPTS,
    linkopts = select({
        "@platforms//os:osx": [
            #TODO(larry): Hide the symbols when we make it work on mac.
        ],
        "@platforms//os:windows": [
            #TODO(larry): Hide the symbols when we make it work on Windows.
        ],
        "//conditions:default": [
            "-Wl,--version-script,$(location :symbols/strai_api_exported_symbols_linux.lds)",
        ],
    }),
    linkshared = 1,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        ":strai_api_lib",
        ":symbols/strai_api_exported_symbols_linux.lds",
    ],
)

cc_library(
    name = "strai_api_lib",
    srcs = glob([
        "src/strai/api.cc",
        "src/strai/api/*.cc",
        "src/strai/api/*.h",
        "src/strai/app/*.cc",
        "src/strai/app/*.h",
        "src/strai/runtime/*.cc",
        "src/strai/runtime/*.h",
        "src/strai/runtime/**/*.cc",
        "src/strai/runtime/**/*.h",
        "src/strai/runtime/task/*.cc",
        "src/strai/runtime/task/*.h",
        "src/strai/util/*.cc",
        "src/strai/util/*.h",
        "src/strai/*.cc",
        "src/strai/*.h",
    ]),
    hdrs = glob([
        "include/strai/*.h",
        "include/strai/**/*.h",
        "include/strai/**/**/*.h",
    ]),
    copts = COPTS,
    linkopts = ["-ldl"],
    linkstatic = True,
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [
        "//:core_worker_lib",
        "//:global_state_accessor_lib",
        "//:strai_common",
        "//src/strai/util",
        "@boost//:callable_traits",
        "@boost//:dll",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@msgpack",
        "@nlohmann_json",
    ],
    alwayslink = True,
)

cc_library(
    name = "strai_cpp_lib",
    srcs = [
        "libstrai_api.so",
    ],
    hdrs = glob([
        "include/strai/*.h",
        "include/strai/**/*.h",
        "include/strai/**/**/*.h",
    ]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "default_worker",
    srcs = glob([
        "src/strai/worker/default_worker.cc",
    ]),
    copts = COPTS,
    linkstatic = True,
    deps = select({
        "@platforms//os:windows": [
            # TODO(SongGuyang): Change to use dynamic library
            # "strai_cpp_lib" when we make it work on Windows.
            "strai_api_lib",
        ],
        "//conditions:default": [
            "strai_cpp_lib",
            "@boost//:callable_traits",
            "@boost//:optional",
            "@msgpack",
            "@nlohmann_json",
        ],
    }),
)

genrule(
    name = "strai_cpp_pkg",
    srcs = [
        "default_worker",
        "libstrai_api.so",
    ],
    outs = ["strai_cpp_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)" &&
        PY_CPP_DIR="$$WORK_DIR/python/strai/cpp" &&
        rm -rf $$PY_CPP_DIR &&
        BOOST_DIR="$$PY_CPP_DIR/include/boost/" &&
        mkdir -p "$$BOOST_DIR" &&
        mkdir -p "$$PY_CPP_DIR/lib/" &&
        cp -f $(location default_worker) "$$PY_CPP_DIR/" &&
        cp -f -r $$WORK_DIR/external/msgpack/include/* "$$PY_CPP_DIR/include" &&
        cp -f -r $$WORK_DIR/external/nlohmann_json/single_include/* "$$PY_CPP_DIR/include" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/archive" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/assert" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/bind" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/callable_traits" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/concept" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/config" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/container" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/container_hash" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/core" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/detail" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/dll" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/exception" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/filesystem" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/functional" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/io" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/iterator" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/lexical_cast" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/move" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/mpl" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/optional" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/parameter" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/preprocessor" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/system" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/type_traits" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/utility" "$$BOOST_DIR" &&
        cp -f -r $$WORK_DIR/external/boost/boost/*.hpp "$$BOOST_DIR" &&
        cp -f $(locations libstrai_api.so) "$$PY_CPP_DIR/lib/" &&
        cp -f -r "$$WORK_DIR/cpp/include/strai" "$$PY_CPP_DIR/include" &&
        THIRDPARTY_DIR="$$WORK_DIR/cpp/example/thirdparty" &&
        rm -rf $$THIRDPARTY_DIR &&
        mkdir $$THIRDPARTY_DIR &&
        cp -f -r "$$PY_CPP_DIR/include" $$THIRDPARTY_DIR &&
        cp -f -r "$$PY_CPP_DIR/lib" $$THIRDPARTY_DIR &&
        cp -f -r "$$WORK_DIR/cpp/example" "$$PY_CPP_DIR" &&
        echo "$$WORK_DIR" > $@
    """,
    local = 1,
    visibility = ["//visibility:public"],
)

# test
cc_test(
    name = "api_test",
    srcs = glob([
        "src/strai/test/*.cc",
    ]),
    copts = COPTS,
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "strai_api_lib",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cluster_mode_test",
    srcs = glob(
        [
            "src/strai/test/cluster/*.cc",
            "src/strai/test/cluster/*.h",
        ],
        exclude = [
            "src/strai/test/cluster/cluster_mode_xlang_test.cc",
        ],
    ),
    args = [
        "--strai_code_search_path=$(location plus.so):$(location counter.so):cpp/src/strai/test/cluster",
        "--strai_head_args '--include-dashboard false'",
    ],
    copts = COPTS,
    data = [
        "counter.so",
        "plus.so",
        "strai_cpp_pkg",
        "src/strai/test/cluster/test_cross_language_invocation.py",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "strai_api_lib",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cluster_mode_xlang_test",
    srcs = glob([
        "src/strai/test/cluster/cluster_mode_xlang_test.cc",
        "src/strai/test/cluster/*.h",
    ]),
    args = [
        "--strai_code_search_path=$(location //java:libio_strai_strai_test.jar)",
        "--strai_head_args '--include-dashboard false'",
    ],
    copts = COPTS,
    data = [
        "strai_cpp_pkg",
        "//java:libio_strai_strai_test.jar",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "strai_api_lib",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "plus.so",
    testonly = True,
    srcs = [
        "src/strai/test/cluster/plus.cc",
        "src/strai/test/cluster/plus.h",
    ],
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    # NOTE(WangTaoTheTonic): For java x-lang tests. See //java:all_tests
    # and `CrossLanguageInvocationTest.java`.
    visibility = ["//java:__subpackages__"],
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@msgpack",
        "@nlohmann_json",
    ],
)

cc_binary(
    name = "counter.so",
    testonly = True,
    srcs = [
        "src/strai/test/cluster/counter.cc",
        "src/strai/test/cluster/counter.h",
    ],
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    # NOTE(WangTaoTheTonic): For java x-lang tests. See //java:all_tests
    # and `CrossLanguageInvocationTest.java`.
    visibility = ["//java:__subpackages__"],
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@msgpack",
        "@nlohmann_json",
    ],
)

cc_test(
    name = "simple_kv_store",
    srcs = glob([
        "src/strai/test/examples/simple_kv_store.cc",
    ]),
    args = [
        "--strai_code_search_path=$(location simple_kv_store.so)",
        "--strai_head_args '--include-dashboard false'",
    ],
    copts = COPTS,
    data = [
        "simple_kv_store.so",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "strai_api_lib",
    ],
)

cc_binary(
    name = "simple_kv_store.so",
    testonly = True,
    srcs = glob([
        "src/strai/test/examples/simple_kv_store.cc",
    ]),
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@msgpack",
        "@nlohmann_json",
    ],
)

cc_binary(
    name = "simple_job",
    srcs = [
        "src/strai/test/examples/simple_job.cc",
    ],
    copts = COPTS,
    data = [
        "simple_job.so",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        ":strai_api_lib",
    ],
)

cc_binary(
    name = "simple_job.so",
    srcs = [
        "src/strai/test/examples/simple_job.cc",
    ],
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@msgpack",
        "@nlohmann_json",
    ],
)

cc_test(
    name = "metric_example",
    srcs = glob([
        "src/strai/test/examples/metric_example.cc",
    ]),
    args = [
        "--strai_code_search_path $(location metric_example.so)",
    ],
    data = [
        "metric_example.so",
    ],
    linkstatic = True,
    tags = ["team:serverless"],
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@msgpack",
        "@nlohmann_json",
    ],
)

cc_binary(
    name = "metric_example.so",
    testonly = True,
    srcs = glob([
        "src/strai/test/examples/metric_example.cc",
    ]),
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "strai_cpp_lib",
        "@boost//:callable_traits",
        "@boost//:optional",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@msgpack",
        "@nlohmann_json",
    ],
)

load("//bazel:python.bzl", "py_test_module_list")

py_test_module_list(
    size = "medium",
    extra_srcs = [],
    files = [
        "test_python_call_cpp.py",
    ],
    tags = [
        "exclusive",
        "medium_size_python_tests",
        "team:core",
    ],
    deps = [],
)

py_test(
    name = "test_submit_cpp_job",
    size = "medium",
    srcs = ["test_submit_cpp_job.py"],
    data = [
        "simple_job",
        "simple_job.so",
    ],
    env = {
        "SIMPLE_DRIVER_SO_PATH": "$(location simple_job.so)",
        "SIMPLE_DRIVER_MAIN_PATH": "$(location simple_job)",
    },
    tags = ["team:core"],
)
